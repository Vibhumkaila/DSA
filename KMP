  vector<int> computeLPS(string small){
        int m = small.size();
        vector<int> lps(m, 0);
        int len = 0, i = 1;
        while(i < m){ 
            if(small[i] == small[len]){
                len++;
                lps[i] = len;
                i++;
            }
            else{
                if(len != 0){
                    len = lps[len - 1];
                }
                else{
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }

    vector<int> KMP(string& big, string& small){
        int n = big.size(), m = small.size();
        vector<int> ans;
        vector<int> lps = computeLPS(small);
        int i = 0, j = 0;
        while(i < n){
            if(big[i] == small[j]){
                i++;
                j++;
            }
            if(j == m){
                ans.push_back(i - m);
                j = lps[j - 1];
            }
            else if(big[i] != small[j]){
                if(j != 0){
                    j = lps[j - 1];
                }
                else{
                    i++;
                }
            }
        }
        return ans;
    }
